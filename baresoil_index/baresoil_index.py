# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BareSoilIndex
                                 A QGIS plugin
 This plugin will make bare soil index from data raster image
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Salsabila
        email                : salsabila.ge@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Import modul yang diperlukan
import os.path  # Modul untuk operasi path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication  # Komponen PyQt untuk core Qt
from qgis.PyQt.QtGui import QIcon  # Komponen PyQt untuk ikon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox  # Komponen PyQt untuk widgets
from qgis.core import QgsProject, QgsRasterLayer, QgsVectorLayer, QgsMessageLog, Qgis  # Kelas-kelas inti dalam QGIS
from qgis.analysis import QgsRasterCalculatorEntry, QgsRasterCalculator  # Kelas untuk analisis raster
from qgis.utils import iface  # Interface QGIS
from qgis import processing  # Modul untuk melakukan analysis atau processing di QGIS
import tempfile  # Modul untuk operasi temporary file

# Import dialog kustom yang telah dibuat
from .baresoil_index_dialog import BareSoilIndexDialog

# Definisi kelas utama untuk plugin QGIS
class BareSoilIndex:
    """QGIS Plugin Implementation."""
        
    def __init__(self, iface):
        """
        Inisialisasi objek plugin.
        
        Parameters:
        iface (QgisInterface): Interface utama QGIS.
        """
        self.iface = iface  # Assign interface ke atribut self.iface
        self.plugin_dir = os.path.dirname(__file__)  # Direktori tempat plugin berada
        self.actions = []  # List untuk menyimpan QAction dari plugin
        self.menu = self.tr(u'&BareSoilIndex')  # Nama menu untuk plugin
        self.first_start = None  # Flag untuk menandai apakah ini pertama kali plugin dijalankan
        self.dlg = None  # Dialog dari plugin, awalnya belum dibuat

    def tr(self, message):
        """
        Terjemahkan pesan teks menggunakan terjemahan plugin.

        Parameters:
        message (str): Pesan yang akan diterjemahkan.

        Returns:
        str: Pesan yang sudah diterjemahkan.
        """
        return QCoreApplication.translate('baresoil_index', message)


    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True,
                   status_tip=None, whats_this=None, parent=None):
        """
        Tambahkan aksi (action) ke menu atau toolbar plugin.

        Parameters:
        icon_path (str): Path ikon untuk aksi.
        text (str): Teks untuk aksi.
        callback (function): Fungsi yang akan dipanggil ketika aksi dijalankan.
        enabled_flag (bool, optional): Flag untuk mengaktifkan atau menonaktifkan aksi (default True).
        add_to_menu (bool, optional): Flag untuk menambahkan aksi ke menu (default True).
        add_to_toolbar (bool, optional): Flag untuk menambahkan aksi ke toolbar (default True).
        status_tip (str, optional): Tip status untuk aksi.
        whats_this (str, optional): Deskripsi aksi.
        parent (QWidget, optional): Widget parent untuk aksi.

        Returns:
        QAction: Objek QAction yang telah ditambahkan.
        """
        icon = QIcon(icon_path)  # Buat objek QIcon dari path ikon
        action = QAction(icon, text, parent)  # Buat objek QAction dengan ikon dan teks
        action.triggered.connect(callback)  # Hubungkan aksi dengan fungsi callback
        action.setEnabled(enabled_flag)  # Set enabled/disabled berdasarkan flag

        if status_tip is not None:
            action.setStatusTip(status_tip)  # Set status tip jika ada

        if whats_this is not None:
            action.setWhatsThis(whats_this)  # Set whats this jika ada

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)  # Tambahkan aksi ke toolbar

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)  # Tambahkan aksi ke menu

        self.actions.append(action)  # Tambahkan aksi ke list actions

        return action  # Kembalikan objek QAction yang telah ditambahkan

    def initGui(self):
        """
        Inisialisasi GUI plugin.

        Menggunakan metode add_action untuk menambahkan aksi ke toolbar dan menu.
        """
        icon_path = ':/plugins/test_plugin/icon.png'  # Path untuk ikon plugin
        self.add_action(icon_path, text=self.tr(u'Bare Soil Index'), callback=self.run, parent=self.iface.mainWindow())
        self.first_start = True  # Set first_start ke True saat inisialisasi GUI

    def unload(self):
        """
        Deinisialisasi plugin.

        Menghapus semua aksi dari toolbar dan menu saat plugin dimuat.
        """
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Test Plugin'), action)  # Hapus aksi dari menu
            self.iface.removeToolBarIcon(action)  # Hapus aksi dari toolbar

    def select_output_file(self, title, file_filter):
        """
        Memilih file output menggunakan dialog.

        Parameters:
        title (str): Judul dialog.
        file_filter (str): Filter file untuk dialog.

        Returns:
        str: Path file yang dipilih atau None jika tidak ada yang dipilih.
        """
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, title, "", file_filter)
        return filename if filename else None

    def get_band(self, combo_box, band_type):
        """
        Mendapatkan layer band dari combo box.

        Parameters:
        combo_box (QComboBox): Combo box yang berisi nama layer.
        band_type (str): Tipe band (Merah/NIR).

        Returns:
        QgsRasterLayer: Layer raster yang dipilih atau None jika tidak ditemukan.
        """
        layer = None  # Inisialisasi layer sebagai None
        layer_name = combo_box.currentText()  # Ambil nama layer dari combo box
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layer_name and isinstance(lyr, QgsRasterLayer):
                layer = lyr  # Assign layer jika nama cocok dan layer adalah QgsRasterLayer
                break
        if not layer:
            QMessageBox.critical(self.iface.mainWindow(), 'Error', f"Tidak dapat menemukan data band {band_type}.")
        return layer  # Kembalikan layer yang sudah ditemukan

    def select_mask_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 'Select Mask File', '', 'Shapefile (*.shp)')
        if filename:
            self.dlg.lineEdit_masking.setText(filename)


    def clip_raster_with_mask(self, input_raster, mask_shapefile):
        """
        Memangkas (clip) raster dengan menggunakan shapefile masker.

        Parameters:
        input_raster (str): Path raster input yang akan dipangkas.
        mask_shapefile (str): Path shapefile masker.

        Returns:
        str: Path file hasil pemangkasan atau None jika gagal.
        """
        if not mask_shapefile:
            return input_raster

        temp_dir = tempfile.mkdtemp()  # Buat direktori temporary
        output_path = os.path.join(temp_dir, 'temp_clipped.tif')  # Path untuk output hasil pemangkasan

        params = {
            'INPUT': input_raster,  # Input raster yang akan dipangkas
            'MASK': mask_shapefile,  # Mask shapefile untuk pemangkasan
            'OUTPUT': output_path  # Path output hasil pemangkasan
        }

        try:
            result = processing.run("gdal:cliprasterbymasklayer", params)  # Jalankan alat pemangkasan raster
            if result and result['OUTPUT']:
                return result['OUTPUT']  # Kembalikan path output jika berhasil
            else:
                QMessageBox.critical(self.iface.mainWindow(), 'Error', 'Gagal melakukan clip citra.')
                return None  # Tampilkan pesan kesalahan jika gagal dan kembalikan None
        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), 'Error', f"Kesalahan dalam menjalankan operasi clip: {str(e)}")
            return None  # Tangkap kesalahan dan kembalikan None

    def calculate_index(self, formula, output_file, success_message, red_band_path, blue_band_path, nir_band_path, swir_band_path):
        """
        Menghitung indeks bare soil menggunakan formula yang diberikan.
        """

        red_band = QgsRasterLayer(red_band_path, "Red Clipped")  # Buat objek QgsRasterLayer untuk band merah
        blue_band = QgsRasterLayer(blue_band_path, "Blue Clipped")  # Buat objek QgsRasterLayer untuk band biru
        nir_band = QgsRasterLayer(nir_band_path, "NIR Clipped")  # Buat objek QgsRasterLayer untuk band NIR
        swir_band = QgsRasterLayer(swir_band_path, "SWIR Clipped")  # Buat objek QgsRasterLayer untuk band SWIR

        if red_band.isValid() and blue_band.isValid and nir_band.isValid() and swir_band.isValid:
            # Buat daftar QgsRasterCalculatorEntry untuk menentukan band yang digunakan dalam perhitungan
            entries = []
            
            # Entri untuk band merah
            ras_red = QgsRasterCalculatorEntry()
            ras_red.ref = 'red@1'  # Referensi dalam formula
            ras_red.raster = red_band  # Objek QgsRasterLayer untuk band merah
            ras_red.bandNumber = 1  # Nomor band

            # Entri untuk band NIR
            ras_blue = QgsRasterCalculatorEntry()
            ras_blue.ref = 'blue@1'  # Referensi dalam formula
            ras_blue.raster = blue_band  # Objek QgsRasterLayer untuk band NIR
            ras_blue.bandNumber = 1  # Nomor band

            # Entri untuk band NIR
            ras_nir = QgsRasterCalculatorEntry()
            ras_nir.ref = 'nir@1'  # Referensi dalam formula
            ras_nir.raster = nir_band  # Objek QgsRasterLayer untuk band NIR
            ras_nir.bandNumber = 1  # Nomor band

            # Entri untuk band NIR
            ras_swir = QgsRasterCalculatorEntry()
            ras_swir.ref = 'swir@1'  # Referensi dalam formula
            ras_swir.raster = swir_band  # Objek QgsRasterLayer untuk band NIR
            ras_swir.bandNumber = 1  # Nomor band

            # Tambahkan kedua entri ke dalam list entries
            entries.append(ras_red)
            entries.append(ras_blue)
            entries.append(ras_nir)
            entries.append(ras_swir)

            # Buat objek QgsRasterCalculator untuk melakukan perhitungan
            calc = QgsRasterCalculator(formula, output_file, 'GTiff', red_band.extent(), red_band.width(),
                                       red_band.height(), entries)
            try:
                # Proses perhitungan menggunakan QgsRasterCalculator
                result = calc.processCalculation()
                
                # Tampilkan pesan sukses jika perhitungan berhasil
                self.iface.messageBar().pushMessage("Success", success_message, level=Qgis.Success, duration=3)
                
                # Buat objek QgsRasterLayer dari output_file dan tambahkan ke proyek QGIS
                layer = QgsRasterLayer(output_file, os.path.basename(output_file), 'gdal')
                QgsProject.instance().addMapLayer(layer)
            except Exception as e:
                # Tangkap kesalahan jika terjadi masalah dalam perhitungan
                self.iface.messageBar().pushMessage("Error", f"Transformasi gagal: {str(e)}", level=Qgis.Critical,
                                                    duration=3)

    def calculate_BSI(self, output_file_bsi):
        """
        Menghitung Bare Soil Index.

        Parameters:
        output_file_bsi (str): Path untuk menyimpan output hasil perhitungan Bare Soil Index.
        """
        # Ambil layer band mdari combo box dan text input mask
        red_band = self.get_band(self.dlg.comboBox_R, "Merah")
        blue_band = self.get_band(self.dlg.comboBox_B, "Biru")
        nir_band = self.get_band(self.dlg.comboBox_Nir, "NIR")
        swir_band = self.get_band(self.dlg.comboBox_Swir, "SWIR")
        mask_shapefile = self.dlg.lineEdit_masking.text()

        if red_band and blue_band and nir_band and swir_band:
            # Pangkas (clip)input band menggunakan shapefile masker
            clipped_red = self.clip_raster_with_mask(red_band.source(), mask_shapefile)
            clipped_blue = self.clip_raster_with_mask(blue_band.source(), mask_shapefile)
            clipped_nir = self.clip_raster_with_mask(nir_band.source(), mask_shapefile)
            clipped_swir = self.clip_raster_with_mask(swir_band.source(), mask_shapefile)

            if clipped_red and clipped_blue and clipped_nir and clipped_swir:
                # Formula untuk menghitung bare soil index
                formula_BSI = '((swir@1 + red@1) - (nir@1 + blue@1))/((swir@1 + red@1) + (nir@1 + blue@1))'
                
                # Hitung indeks menggunakan calculate_index method
                self.calculate_index(formula_BSI, output_file_bsi,
                                     "Perhitungan Bare Soil Index berhasil selesai.", clipped_red, clipped_blue, clipped_nir, clipped_swir)

    def run(self):
        """
        Fungsi utama yang dipanggil ketika plugin dijalankan.

        Memeriksa jika ini pertama kali plugin dijalankan dan menampilkan dialog
        untuk memilih band dan shapefile masker.
        """
        if self.first_start:
            # Jika ini pertama kali plugin dijalankan, buat instance dari BareSoilIndexDialog
            self.first_start = False
            self.dlg = BareSoilIndexDialog()
            self.dlg.pushButton_mask.clicked.connect(self.select_mask_file)
            self.dlg.pushButton_BSI.clicked.connect(self.select_output_baresoilindex)

        # Bersihkan combo box untuk band input
        self.dlg.comboBox_R.clear()
        self.dlg.comboBox_B.clear()
        self.dlg.comboBox_Nir.clear()
        self.dlg.comboBox_Swir.clear()

        # Ambil semua layer raster dari proyek QGIS
        raster_layers = [layer for layer in QgsProject.instance().mapLayers().values() if
                         isinstance(layer, QgsRasterLayer)]
        
        # Tambahkan nama-nama layer raster ke combo box untuk band input
        for layer in raster_layers:
            self.dlg.comboBox_R.addItem(layer.name())
            self.dlg.comboBox_B.addItem(layer.name())
            self.dlg.comboBox_Nir.addItem(layer.name())
            self.dlg.comboBox_Swir.addItem(layer.name())

        # Tampilkan dialog
        self.dlg.show()

        # Eksekusi dialog dan tanggapi hasilnya
        result = self.dlg.exec_()
        if result == 1:
            # Jika tombol OK ditekan, ambil path output Bare Soil Index dari line edit
            output_file_baresoilindex = self.dlg.lineEdit_BSI.text()
            
            # Hitung bare soil index menggunakan method calculate_BSI
            self.calculate_BSI(output_file_baresoilindex)

    def select_output_baresoilindex(self):
        """
        Memilih path output untuk file bare soil index menggunakan QFileDialog.
        """
        if not self.dlg.lineEdit_BSI.text():
            # Jika line edit kosong, tampilkan dialog untuk memilih path output
            self.dlg.lineEdit_BSI.setText(
                self.select_output_file("Pilih file output Bare Soil Index", '*.tif'))


